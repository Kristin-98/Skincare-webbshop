// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String     @id @default(cuid())
  articleNumber String     @unique @default(cuid())
  title         String
  description   String
  image         String
  price         Float
  categoryId    String?    @default(cuid())
  categories    Category[] @relation("ProductCategories")
  stockQuantity Int
  orderRows     OrderRow[]
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique @default(cuid())
  createdAt        DateTime    @default(now())
  totalPrice       Float
  shippingAdressId String
  status           OrderStatus @default(pending)
  customerId       String

  customer       User       @relation(fields: [customerId], references: [id])
  shippingAdress Adress     @relation(fields: [shippingAdressId], references: [id])
  orderRows      OrderRow[]
}

model OrderRow {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Adress {
  id           String  @id @default(cuid())
  name         String
  streetAdress String
  email        String
  phone        Int
  postalCode   Int
  city         String
  Order        Order[]
}

enum OrderStatus {
  pending
  sent
}

// -------------- AUTH -------------- //

model User {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  isAdmin   Boolean  @default(false)

  email         String
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Order         Order[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String
  products    Product[] @relation("ProductCategories")
}
